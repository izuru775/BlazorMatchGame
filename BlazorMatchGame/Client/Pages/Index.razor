@page "/"
@using System.Timers
@inject NavigationManager NavigationManager

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";
            <div class="col-3">
                <button type="button" @onclick="@(()=>ButtonClick(animal,uniqueDescription))" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <br />
    <div class="row">
        <h2>Match found:@matchesFound</h2>
    </div>
    <br />
    <div class="row">
        <h2>Time:@timeDisplay</h2>
    </div>
    <br />
    <div class="row">
        <h2>Pervious Time:@bestTimeDisplay</h2>
    </div>
</div>



@code{
    List<string> animalEmoji = new List<string>()
    {
            "🐶", "🐶",
            "🐺", "🐺",
            "🐮", "🐮",
            "🦊", "🦊",
            "🐱", "🐱",
            "🦁", "🦁",
            "🐯", "🐯",
            "🐹", "🐹",
    };
    List<string> animalEmoji1 = new List<string>()
    {
            "🐔", "🐔",
            "🐸", "🐸",
            "🐵", "🐵",
            "🐧", "🐧",
            "🐗", "🐗",
            "🐼", "🐼",
            "🐨", "🐨",
            "🐷", "🐷",
    };
    List<string> animalEmojis = new List<string>();

    List<string> shuffledAnimals = new List<string>();

    int matchesFound = 0;
    // Timer related variables
    Timer timer;
    string bestTimeDisplay = "";
    int tenthsOfSecondsElapsed = 100;
    string timeDisplay;
    int listCount = 0;
    protected override void OnInitialized()
    {
        // Telling timer how frequently to tick and what method to call
        
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetUpGame();
    }
    private void SetUpGame()
    {
        bestTimeDisplay = (tenthsOfSecondsElapsed / 10F).ToString("0.0s");
        Random random = new Random();
        if (listCount == 1)
        {
            animalEmojis = animalEmoji1;

        }
        else
        {
            shuffledAnimals = animalEmoji;
            animalEmojis = animalEmoji;
            listCount = 0;
        }
        shuffledAnimals = animalEmojis
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        // Reset the timer when game is setup
        tenthsOfSecondsElapsed = 100;
    }

    // Event handler section

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            // First section of the pair
            lastAnimalFound = animal;
            lastDescription = animalDescription;

            // Start the timer on first button click
            timer.Start();
        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            // Match found! Reset for next pair
            lastAnimalFound = string.Empty;

            // Replace found animals with empty string to hide them
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();
            matchesFound++;
            if (matchesFound == 8)
            {
                listCount++;
                // Stop the timer & display a message
                timer.Stop();
                timeDisplay += "- Play Again?";

                SetUpGame();
            }
        }
        else
        {
            // User selected a pair that don't match
            // Reset selection
            lastAnimalFound = string.Empty;
        }
    }

    // Tick event handler for timer
    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            if (tenthsOfSecondsElapsed == 0)
            {
                timer.Stop();
                SetUpGame();
                
            }
            else
            {
                tenthsOfSecondsElapsed--;
                timeDisplay = (tenthsOfSecondsElapsed / 10F)
                    .ToString("0.0s");
                StateHasChanged();
            }

        });
    }
}